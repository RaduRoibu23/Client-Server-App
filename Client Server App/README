
Detalii despre implementare:
Programul nostru foloseste un loop while true care asteapta comenzi si se termina doar cand primeste comanda "exit".
In fiecare iteratie a loop-ului, preluam noua comanda de la tastatura,
stabilim o conexiune HTTP noua cu serverul si efectuam o actiune diferita in functie de comanda primita.
In acest stadiu, verificam mai intai erorile evidente inainte de a trimite un mesaj catre server.
De exemplu nu poti accesa biblioteca daca nu esti autentificat, nu poti adauga,
vizualiza sau sterge carti fara acces la biblioteca si nu te poti deloga daca nu esti autentificat.


Am folosit urmatoarele biblioteci pentru a putea realiza acest proiect:

"json.hpp" - Biblioteca JSON pentru manipularea datelor JSON preluata de pe github.com/nlohmann/json
"requests.hpp" - Biblioteca de cereri HTTP pentru a efectua solicitari catre server preluata si modificata din laboratorul 9
"helpers.hpp" - Fisierul de functii ajutatoare pentru manipularea si validarea datelor preluat si modificat din laboratorul 9

Explicatie pentru folosirea bibliotecii JSON:
Am folosit nlohmann::json pentru manipularea datelor JSON in C++ datorita faptului ca are suport pentru serializare/deserializare
si manipularea structurilor complexe JSON, are o documentatie foarte mare cu multe ghiduri
si exemple detaliate care faciliteaza utilizarea. De asemenea, are mecanisme de gestionare a erorilor
si validare a datelor deja integrate si este o biblioteca header-only simplu de integrat in C++.

Utilizarea fisierelor `.hpp` in loc de `.h` :

1. Claritate si organizare:
   - Fisierele `.hpp` sunt folosite pentru a indica clar ca acestea contin cod specific limbajului C++.
   Aceasta ajuta la separarea logica a fisierelor C++ de cele C, oferind o mai buna organizare a codului si evitand confuziile.

2. Conventii de proiect:
   - Utilizarea `.hpp` este o conventie adoptata in multe proiecte C++ moderne pentru a sublinia faptul ca fisierul de antet
   poate include cod specific C++, cum ar fi clase, functii template si functii inline.

Codul contine aditional comentarii pentru a explica fiecare functie si variabila folosita in cadrul aplicatiei.
Comentarile sunt prezente in locuri unde am considerat ca este necesar sa explic codul pentru a fi mai usor de inteles.

/* 
  O sa explic comanda register in detaliu
  Comanda register este formata din 2 stringuri: username si password
  Se deschide conexiunea cu serverul
  Se citesc username si password de la tastatura
  Se creaza un obiect JSON cu username si password
  Se serializeaza obiectul JSON
  Se creaza un mesaj de tip POST cu datele serializate
  Se trimite mesajul la server
  Se primeste raspunsul de la server
  Se extrage eroarea din raspuns
  Daca eroarea este goala, inseamna ca nu exista erori si se afiseaza un mesaj de succes
  Altfel, se afiseaza eroarea
  Se inchide conexiunea cu serverul
  */

  Majoritatea functiilor sunt implementate in fisierul helpers.cpp,
  iar functiile care sunt specifice comenzilor sunt implementate in fisierul client.cpp si au aproximativ aceeasi structura precum register.


Mai jos voi oferi o scurta explicatie a fiecare dintre comenzile folosite in cadrul aplicatiei:
Acestea respecta cerintele din enunt si sunt implementate in fisierul client.cpp (main) si in fisierul helpers
Pentru a rula aplicatia, se va folosi comanda make in terminal pentru a compila proiectul.
Dupa ce proiectul a fost compilat, se va rula aplicatia folosind comanda ./client.
Si apoi se vor introduce comenzile dorite.

Inregistrare:
Comanda REGISTER se foloseste pentru a crea un cont nou pe serverul HTTP.
Dupa ce va fi introdusa comanda, se va solicita introducerea numelui de utilizator si a parolei.
Daca contul a fost creat cu succes, programul va afisa un mesaj de confirmare.

Autentificare:
Comanda LOGIN se foloseste pentru a autentifica un utilizator pe serverul HTTP.
Dupa ce se introduce comanda, se va solicita introducerea numelui de utilizator si a parolei.
Daca autentificarea a fost realizata cu succes, programul va afisa un mesaj de confirmare.
Altfel se va afisa un mesaj de eroare.

Accesare biblioteca:
Comanda ENTER_LIBRARY se foloseste pentru a accesa biblioteca de carti.
Daca accesul a fost realizat cu succes, programul va afisa un mesaj de confirmare.
Altfel se va afisa un mesaj de eroare.

Vizualizare carti:
Comanda GET_BOOKS se foloseste pentru a vizualiza toate cartile din biblioteca.
Daca exista carti in biblioteca, acestea vor fi afisate sub forma tabelara.
Altfel se va afisa un mesaj de eroare.

Vizualizare carte:
Comanda GET_BOOK se foloseste pentru a vizualiza detaliile unei carti din biblioteca.
Dupa ce se introduce comanda, programul va solicita inserarea id-ului cartii.
In cazul in care cartea a fost gasita, vor fi afisate detaliile acesteia.
In caz contrar un mesaj de eroare va fi afisat.

Adaugare carte:
Comanda ADD_BOOK se foloseste pentru a adauga o carte in biblioteca.
Dupa ce se introduce comanda, programul va solicita inserarea titlului, autorului, genului si anul aparitiei cartii.
In cazul in care cartea a fost adaugata cu succes, va fi afisat un mesaj de confirmare.

Stergere carte:
Comanda DELETE_BOOK se foloseste pentru a sterge o carte din biblioteca.
Dupa ce comanda este introdusa, programul va solicita inserarea id-ului cartii.
In cazul in care cartea a fost stearsa cu succes, se va afisa un mesaj de confirmare.
In caz contrar un mesaj de eroare va fi afisat.

Delogare:
Comanda LOGOUT se foloseste pentru a deloga utilizatorul curent.
Daca delogarea a fost realizata cu succes, programul va afisa un mesaj de confirmare.

Iesire:
Comanda EXIT se foloseste pentru a inchide aplicatia.



